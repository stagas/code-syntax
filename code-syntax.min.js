var{replace:e}="",t=/[&<>'"]/g,n={"&":"&amp;","<":"&lt;",">":"&gt;","'":"&#39;",'"':"&quot;"},s=e=>n[e],a=n=>e.call(n,t,s),r=async(e,t=new Set)=>{const n=(await(await(e?.default)??e))?.default??e;if(!n)throw new ReferenceError("Could not find definition for language");const s={},a=[];for(let[e,o]of Object.entries(n))t.add(e),Array.isArray(o)&&(s[e]=await r(o[1],t),o=o[0]),a.push(`(?<${e}>${o?.source??o})`);const o=RegExp(a.join("|"),"gm");return o.map=s,o.keys=t,o},o=(e,t)=>t.replace(RegExp("("+e.source+")|(?<catchbad>[&<>\"'])","gm"),((...t)=>{const n=t.pop(),s=Object.entries(n).filter((e=>null!=e[1])),[r,i]=s[0];if("catchbad"===r)return a(i);if(e.map){const t=e.map[r];if(t)return`<span class="${r}-outer">${o(t,i)}</span>`}return`<span class="${r}">${a(i)}</span>`})),i=new Map,l=e=>{const t=new CSSStyleSheet;return t.replaceSync("*{color:var(--color);}*::selection{background:var(--selection)!important}"+e.map((e=>`.${e}{color:var(--${e});font-style:var(--${e}-style);font-weight:var(--${e}-weight)}`)).join("")),t},c={},h=class extends HTMLElement{static get observedAttributes(){return["language","theme","html"]}#e=[];pins={};constructor(){super();const e=this.attachShadow({mode:"open"});e.innerHTML='<slot style="display:none"></slot><pre style="margin:0"><code></code></pre>',this.pins.code=e.querySelector("code");const t=new MutationObserver(this.render),n=e.querySelector("slot");n.addEventListener("slotchange",(()=>{this.#e=n.assignedNodes(),this.#e.forEach((e=>t.observe(e,{characterData:!0}))),this.render()}))}highlight=e=>a(e);render=()=>{this.html=this.highlight(this.#e.map((e=>{const t=e.textContent;return t.trim().length?t:""})).join(""))};set html(e){this.pins.code.innerHTML=e}set syntax(e){this.setSyntaxDefinition(e)}set styleSheet(e){this.shadowRoot.adoptedStyleSheets=[e]}async setSyntaxDefinition(e){let{style:t,regexp:n}=i.get(e)??{};t||(n=await r(e),t=l([...n.keys]),i.set(e,{style:t,regexp:n})),this.styleSheet=t,this.highlight=e=>o(n,e),this.render()}attributeChangedCallback(e,t,n){"language"===e&&n&&n in c&&this.setSyntaxDefinition(c[n]),"theme"===e&&this.setAttribute("code-syntax-theme",n),"html"===e&&(this.html=n??"")}},d=(e,{theme:t="monokai",getLanguage:n=(e=>[...e.classList].filter((e=>e.startsWith("language-")))[0].split("-").pop())}={})=>e.forEach((e=>{const s=new h;s.textContent=e.textContent,s.setAttribute("theme",t),s.setAttribute("language",n(e)),e.replaceWith(s)})),g=e=>d([...document.querySelectorAll("code")].filter((e=>"PRE"===e.parentNode?.nodeName)),e);export{h as CodeSyntaxElement,r as compile,l as createStyleSheet,c as languages,d as patchElements,g as patchPreCodeElements,o as syntax};